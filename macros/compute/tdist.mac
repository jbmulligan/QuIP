# compute the t distribution
#
# How should the user use these macros???
#
# T_Dist $n_dof - computes into static buffers...
#
# The formulas came from wikipedia, but they should be repeated here!

Define Declare_TD_Objects 0

Assign n_t_samps 10*4096+1
Assign n_isamps	999	# number of inverse samples...
Set td_xmax 40	# range limit of domain - for computing

Assign _t_bin_width 2*$td_xmax/$n_t_samps

Vector domain $n_t_samps 1 double

Vector tdist $n_t_samps 1 double
Vector cum_tdist $n_t_samps 1 double
#Vector cum_tdist2 $n_t_samps 1 double	# for careful computation...
#Vector tdist_copy $n_t_samps 1 double	# sorted copy for careful Cumsum

Vector inv_domain $n_isamps 1 double	# inverse domain (0-1)
Vector inv_idx $n_isamps 1 u_short	# index into inverse
Vector inv_cum $n_isamps 1 double  	# inverse cumulative
.

Define Declare_TD_Objects_With_Bin_Width 1 bin_width

#Assign _t_bin_width 2*$td_xmax/$n_t_samps
Assign _t_bin_width $1
Set td_xmax 40	# range limit of domain - for computing
Assign n_t_samps 2*$td_max/$_t_bin_width
#Assign n_t_samps 10*4096+1

Assign n_isamps	999	# number of inverse samples...


Vector domain $n_t_samps 1 double

Vector tdist $n_t_samps 1 double
Vector cum_tdist $n_t_samps 1 double
#Vector cum_tdist2 $n_t_samps 1 double	# for careful computation...
#Vector tdist_copy $n_t_samps 1 double	# sorted copy for careful Cumsum

Vector inv_domain $n_isamps 1 double	# inverse domain (0-1)
Vector inv_idx $n_isamps 1 u_short	# index into inverse
Vector inv_cum $n_isamps 1 double  	# inverse cumulative
.

Define JJunk 0

Vector ipts $n_isamps 2 float

Subvector ic1 inv_cum $n_isamps-1 0
Subvector ic2 inv_cum $n_isamps-1 1
Vector dcum $n_isamps-1 1 double
Vector ibw $n_isamps 1 double
Subvector ibw1 ibw $n_isamps-1 0
Subvector ibw2 ibw $n_isamps-1 1

Vector ierror $n_isamps 1 double
Vector iadj $n_isamps 1 double
Vector last_ierror $n_isamps 1 double
Vector delta_error $n_isamps 1 double
Vector igain_vec $n_isamps 1 double
expressions
  export delta_error
  export last_ierror
  export ierror
  export iadj
  export igain_vec
  quit

Vector itd $n_isamps 1 double
Vector trial $n_isamps 1 double
Vector indices $n_isamps 1 u_short
.

# Compute the t distribution (not the cumulative)
#
# The form of this is a complicated coefficient (quotient of gamma fns),
# times pow( 1+t^2/v , -(v+1)/2 )

Define Compute_TDist 3 dest domain dof
Ramp1D $2 -$td_xmax 2*$td_xmax/($n_t_samps-1)
Compute_TDist_From_Domain $1 $2 $3
.

Define Compute_TDist_From_Domain 3 dest domain dof
Assign v $3
VVMul $1 $2 $2	# t^2
VSMul $1 $1 1/$v
VSAdd $1 $1 1
VSPow $1 $1 -($v+1)/2
Get_TD_Coeff _c $v
#advise "dof = $3, coeff = $_c"
VSMul $1 $1 $_c
.

# When we compute sums, we have best precision if we add small numbers
# together first.

Define Careful_Cumsum 2 target source
VMov tdist_copy $2
VMov $1[0] tdist_copy[0]
# in the first half, the values are already sorted...
Subvector _s tdist_copy floor(ncols(tdist_copy)/2) 0
Subvector _d $1 floor(ncols(tdist_copy)/2) 0
Cumsum _d _s
Delete_Image _s
Delete_Image _d

Assign i floor(ncols(tdist_copy)/2)
Assign n ncols(tdist_copy)-$i
repeat $n
  Subvector _s tdist_copy $i+1 0
  # sort these values
  Sort _s
  VSum $1[$i] _s
  Delete_Image _s
  Increment i
  end
.

Set prev_tdist_dof -1

# Compute the t distribution, with the specified degrees of freedom...

Define T_Dist 1 degrees_of_freedom
If ($1)==$prev_tdist_dof exit_macro

If !obj_exists(tdist) Declare_TD_Objects

Compute_TDist tdist domain $1

# Now it is all good except for normalization...
#Convert pts{1} plot_tdist
#Select_Plotter p
#XYPlot pts


# integrate
VSMul tdist tdist $_t_bin_width
# This has problems with numerical precision when we start adding the small
# values on the right tail...  Maybe it would be better to reflect?
Cumsum cum_tdist tdist

#Careful_Cumsum cum_tdist2 tdist
#Display cum_tdist[ncols(cum_tdist)-1]
#Display cum_tdist2[ncols(cum_tdist)-1]

#Convert pts{1} plot_cum_tdist
#XYPlot pts

# Now invert the cumulative.
# (This allows us to look up the critical value for a given p value.)
#
# We don't need so many samples here, just enough
# for the resolution we are interested.  For example,
# if we want the 99% confidence interval, then
# we need the values for 0.005 and 0.995.
# Because we can't represent the values for 0 and 1
# (which are -inf and +inf), each bin represents
# the value at its center, so in this example the
# minimal case would be where the first bin represents
# 0.01 and the last bin 0.99, with steps of 0.01 (99 bins)
# Let't do 0.001, then we have 999 bins


Assign inc 1/($n_isamps+1)
Ramp1D inv_domain $inc $inc

Set i 0		# index of the current inverse sample
Set j 0		# index into the cumulative
Set last_j -1
Set half_passed 0
repeat $n_isamps
  Assign t value(inv_domain[$i])	# target
  #advise "i = $i   target = $t"
  Set found 0
  do
    If $j>=ncols(cum_tdist)
      "Display cum_tdist error_exit 'OOPS i=$i t=$t j=$j'"
    Assign v value(cum_tdist[$j])
    If $v>=0.5&&!$half_passed "advise 'j = $j  v = $v' Set half_passed 1"
    If $v>$t
      Then "Select_IIdx Set found 1"
      Else "Increment j"
    while !$found
  Checkit
  Set last_j $j
  # should we check whether a value is repeated?
  Increment i
  end
# Now inv_idx is set, we have to scale...
Map inv_cum inv_idx domain
## # Print some values to check against published table...
# This is a two-tailed test?
# bin center is 0.005 - bin width is 0.01?
#advise "DOF = $1   p = 0.01"
# first bin is 0.001, last is 0.999
advise "t value for p=0.001"
Display inv_cum[998]
advise "t value for p=0.01"
Display inv_cum[989]
advise "t value for p=0.05"
Display inv_cum[949]
#Display inv_cum[0]
#Display inv_cum[1]
#advise "DOF = $1   p = 0.05"
#Display inv_cum[97]

Assign prev_tdist_dof $1
.

Define Checkit 0
If $j!=$last_j exit_macro
advise "Repeated index $j (last_j = $last_j), consider using more samples..."
advise "i = $i, t = $t, v = $v"
Assign frac $j/$n_t_samps
Assign _t value(domain[$j])
advise "frac = $frac, t = $_t"
.

Define Select_IIdx 0
If $j==0 "VSet inv_idx[$i] $j exit_macro"
Assign v2 value(cum_tdist[$j-1])
VSet inv_idx[$i] ($v-$t)<($t-$v2)?$j:$j-1
#Display inv_idx[$i]
.

# compute the normalizing coefficient for the t distribution

# v is the degrees of freedom
# v must be larger than 2...

Assign pi 4*atan(1)

Define Get_TD_Coeff 2 dest_var dof
Set _v $2
#If $_v<=2 "error_exit 'Get_TD_Coeff:  degrees of freedom ($_v) must be > 2'"
If $_v<1 "error_exit 'Get_TD_Coeff:  degrees of freedom ($_v) must be >= 1'"
If $_v==2 "Assign $1 gamma(1.5)/sqrt($pi*$_v) exit_macro"
If $_v==1 "Assign $1 1/(sqrt($pi*$_v)*gamma(0.5)) exit_macro"
If $_v&1		# odd
  Then "Assign $1 1/($pi*sqrt($_v))"	# odd
  Else "Assign $1 1/(2*sqrt($_v))"		# even
##Assign $1 1/($pi*sqrt($_v))	# 1 over pi root v
#Assign $1 1/sqrt($pi*$_v)		# 1 over root pi v
# gamma(1)=1
#If $_v<=2 exit_macro

# This appears correct for _v odd, but not _v even!?
Set __v $_v
Set _factor 1
do
  Add_Var __v -2
  Assign __u $__v+1
  Mul_Var _factor $__u/$__v
#  advise "_factor = $_factor, numerator = $__u   denom = $__v"
  while $__v>2
Mul_Var $1 $_factor
#Assign _factor2 gamma(($_v+1)/2)/(sqrt($pi*$_v)*gamma($_v/2))
#advise "v = $_v   FACTOR = $$1   FACTOR2 = $_factor2"
.

Set signif_idx -1

Define Init_Tcrit_Tbl 0
advise "Init_Tcrit_Tbl BEGIN"
#Set n_tcrit 360		# where does this number come from???
Vector tcrit_tbl $n_tcrit 1 float	# high and low values should be symmetric...
					
VSet tcrit_tbl 0
If !var_exists(tcrit_cache_file)
  "Set tcrit_cache_file ascii/tcrit_tbl.$n_tcrit.$significance.asc"
If file_exists('$tcrit_cache_file')
  "Get_Ascii tcrit_tbl $tcrit_cache_file"
advise "Init_Tcrit_Tbl DONE"
.

Define Get_Tcrit 1 n_dof
If $signif_idx<0 "error_exit 'Get_Tcrit:  need to set significance level for t-test (with Set_Significance)!?'"
Assign n_dof $1
If !obj_exists(tcrit_tbl) Init_Tcrit_Tbl
Assign tcrit value(tcrit_tbl[$n_dof-1])
If $tcrit==0
  # must be single quotes to defer evaluation of $tcrit
 # Then
  ' advise "Computing tcrit for n_dof = $n_dof" \
   T_Dist $n_dof \
   Assign tcrit value(inv_cum[$signif_idx]) \
   VSet tcrit_tbl[$n_dof-1] $tcrit \
   Put_Ascii tcrit_tbl $tcrit_cache_file'
  #Else 'advise "Using cached value of tcrit, n_dof = $n_dof"'
.

# Where do these indices come from?
# What assumptions are made about the table?
# What determines the table size n_tcrit (5000)?
#
# The T_Dist macro computes the distribution...
#
# If we ask for 0.01, that should be single-tailed...
#
# signif_idx is used to index the inverse cumulative
# distribution.  So we put in a proportion and get out a t value.
# The domain goes from 0 to 1.  We compute the inverse cumulative
# n_isamps is the number of columns of inv_cum

Define Set_Significance 1 p_value
Set significance $1
Set n_tcrit 5000	# different n DOF
If $n_samples>$n_tcrit "Set n_tcrit $n_samples"
Set sig_idx -1
If !var_exists('n_isamps') "Set n_isamps 999"
#If !strcmp('$significance','05')
#  "Assign signif_idx round(($n_isamps+1)*0.95)-1"
#If !strcmp('$significance','01')
#  "Assign signif_idx round(($n_isamps+1)*0.99)-1"
#If !strcmp('$significance','001')
#  "Assign signif_idx round(($n_isamps+1)*0.999)-1"
#If $signif_idx<0
#  "error_exit 'Significance ($significance) must be 05, 01 or 001'"
Set _p 0.$significance
Assign signif_idx round(($n_isamps+1)*(1-$_p))-1
advise "idx for p=0.$significance is $signif_idx"
.

Define Get_P_Value 1 tstat
Set idx 0
repeat $n_isamps
  If 'value(inv_cum[$idx])>($1)' 'Display inv_cum[$idx] advise "t = $1" Assign p_value 1-$idx/1000 Set p_string "= $p_value" exit_macro'
  Increment idx
  end
Set p_string "< 0.001"
.

