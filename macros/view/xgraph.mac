
# xgraph.mac  support for Xgraph shell utility

# command line option processing, in the spirit of old graph(1)
#
# These are the old graph options:
#
# -a	automatically provide abscissas
# -b	break graph after labels
# -c	string is default label
# -g    grid style
# -l    next arg is graph label
# -m    next arg is line mode (or color)
# -s    don't erase before plotting
# -x [l]  logarithmix if l present, next one or two args are lower (and upper) x limits
#		third arg if present is grid spacing
# -y [l]  like x
# -h	fraction of space for height
# -w	similarly for width
# -r    fraction of space to move right
# -u    similarly for up
# -t    transpose axes (-x not applies to the vertical axis)
#
# if lower limit exceeds upper limit the axis is reversed
# log axes may not be reversed
#
# Note that, unlike old graph(1), Xgraph does not handle labels embedded in the plotfile,
# because it is read into a data object using Get_Ascii...
#
#
# New long options:
#
# --width w			width of plotting window
# --height h			width of plotting window
# --x_legend string		legend for X axis
# --y_legend string		legend for Y axis

Set scale_determined 0
Set axes_drawn 0
Set x_scale_determined 0
Set y_scale_determined 0
Set have_y_legend 0
Set have_x_legend 0
Set grid_style 1		# default

Define Set_Default_Plotter_Params 0
advise Set_Default_Plotter_Params
Set x_tick_spacing -1
Set y_tick_spacing -1
Set y_legend none
Set x_legend none
.

# Process the next arg, which could be an option OR a file to plot

Define Process_Arg 1 index
#advise "Process_Arg $1 (argc = $argc)"
Set argname argv$1
Set arg $$argname
If !strncmp('$arg','--',2) "Process_Long_Option $arg $1 exit_macro"
If !strncmp('$arg','-',1) "Process_Short_Option $arg $1 exit_macro"
# The default action is plot a file of points
#If !$have_plotter_instance "Plotter_Instance Set_Default_Plotter_Params"
If !$have_plotter_instance "Plotter_Instance "
#advise "Graph_File $$argname $pen_color"
Graph_File $$argname $pen_color
Next_Pen_Color
Assign i_arg 1+$1
.

Define Next_Pen_Color 0
If $pen_color==$dark_red "Set pen_color $black-1"
Increment pen_color
If $pen_color==$plot_background "Increment pen_color"
.

Set plot_xmin 0
Set plot_ymin 0
Set plot_xmax 1
Set plot_ymax 1

Define X_Axis_Option 1 index
Assign j_arg $1
Increment j_arg
Set argname argv$j_arg
# BUG check for range?
Assign plot_xmin $$argname
Increment j_arg
Set argname argv$j_arg
Assign plot_xmax $$argname
Add_Var i_arg 3
Set argname argv$i_arg
Assign x value(string_obj('$$argname')[0])
#If isdigit(string_obj('$$argname')[0])
If isdigit($x)
  "Set x_tick_spacing $$argname Increment i_arg"
Set x_scale_determined 1
If $x_scale_determined&&$y_scale_determined "Set scale_determined 1"
Print scale_determined
.

Define Y_Axis_Option 1 index
Assign j_arg $1
Increment j_arg
Set argname argv$j_arg
# BUG check for range?
Assign plot_ymin $$argname
Increment j_arg
Set argname argv$j_arg
Assign plot_ymax $$argname
Add_Var i_arg 3
Set argname argv$i_arg
advise "Y_Axis_Option:  3rd arg $argname = $$argname"
# If the next arg is not a number, then it is probably a filename...
If isdigit(string_obj('$$argname')[0])
  Then "advise 'digit' Set y_tick_spacing $$argname Increment i_arg"
  Else "advise 'Not a digit'"
Set y_scale_determined 1
Print y_tick_spacing
If $x_scale_determined&&$y_scale_determined "Set scale_determined 1"
Print scale_determined
.

Define Grid_Style_Option 1 index
Assign j_arg $1
Increment j_arg
Set argname argv$j_arg
Assign grid_style $$argname
#Print grid_style
Add_Var i_arg 2
.

Define Line_Style_Option 1 index
Assign j_arg $1
Increment j_arg
Set argname argv$j_arg
Assign pen_color $white+$$argname
#Print pen_color
Add_Var i_arg 2
.


Define Process_Short_Option 2 option index
If !strcmp('$1','-x') "X_Axis_Option $2 exit_macro"
If !strcmp('$1','-y') "Y_Axis_Option $2 exit_macro"
If !strcmp('$1','-g') "Grid_Style_Option $2 exit_macro"
If !strcmp('$1','-m') "Line_Style_Option $2 exit_macro"
warn "unrecognized short option $1"
.

Define Window_Width_Option 1 index
#advise "Window_Width_Option $1"
Assign j_arg $1
Increment j_arg
Set argname argv$j_arg
#advise "window width requested:  $$argname"
Assign plotter_width $$argname
Add_Var i_arg 2
#advise DONE
.

Define Window_Height_Option 1 index
Assign j_arg $1
Increment j_arg
Set argname argv$j_arg
#advise "window width requested:  $$argname"
Assign plotter_height $$argname
Add_Var i_arg 2
.

Define Y_Legend_Option 1 index
Assign j_arg $1
Increment j_arg			# BUG need to make sure that this arg exists!
Set argname argv$j_arg
Y_Legend $$argname
Set y_legend $$argname
Set have_y_legend 1
Add_Var i_arg 2
.

Define X_Legend_Option 1 index
Assign j_arg $1
Increment j_arg			# BUG need to make sure that this arg exists!
Set argname argv$j_arg
#X_Legend $$argname
Set x_legend $$argname
Set have_x_legend 1
Add_Var i_arg 2
.

Define Process_Long_Option 2 option index
#advise "Process_Long_Option $1"
If !strcmp('$1','--width') "Window_Width_Option $2 exit_macro"
If !strcmp('$1','--height') "Window_Height_Option $2 exit_macro"
If !strcmp('$1','--x_legend') "X_Legend_Option $2 exit_macro"
If !strcmp('$1','--y_legend') "Y_Legend_Option $2 exit_macro"
warn "unrecognized long option $1"
.

# BUG we can't get args $1 etc from within macro...

Define Process_Options 0

Set_Default_Plotter_Params

Set i_arg 1
do
  Process_Arg $i_arg
  while $i_arg<=$argc
.


Define Graph_File 2 filename pen_index
If !file_exists('$1') "warn 'file \"$1\" does not exist!?' exit_macro"

# get the number of lines (points)

os
  pipes
    open line_counter read "wc -l < $1"
    read line_counter nlines
    close line_counter
    quit
  quit

advise "file $1 has $nlines lines"

data
  vector pts $nlines 2 float
  ascii
    read pts $1
    quit
  quit

Get_Max maxx pts{0}
Get_Min minx pts{0}
Get_Min miny pts{1}
Get_Max maxy pts{1}
#If !var_exists(plot_miny) "Assign plot_miny $miny"
#If !var_exists(plot_maxy) "Assign plot_maxy $maxy"

Tell_If "$minx - x - $maxx      $miny - y - $maxy"
advise "$minx - x - $maxx      $miny - y - $maxy"

# We need a routine to pick a nice range...

Get_Round_Range miny maxy
#Print y_tick_spacing
If $y_tick_spacing==(-1)
  "advise 'Graph_File:  Resetting y_tick_spacing to $chunk' \
   Set y_tick_spacing $chunk"

Get_Round_Range minx maxx
If $x_tick_spacing==(-1)
  "Set x_tick_spacing $chunk"

If !$x_scale_determined "Assign plot_xmin $minx Assign plot_xmax $maxx"
If !$y_scale_determined "Assign plot_ymin $miny Assign plot_ymax $maxy"

# This check is now done in Get_Round_Range...
#### Make sure that we have some variation
###If $plot_xmax==$plot_xmin "Add_Var plot_xmax 1 Add_Var plot_xmin -1"
###If $plot_ymax==$plot_ymin "Add_Var plot_ymax 1 Add_Var plot_ymin -1"

If !$scale_determined "Plot_Data_Range $plot_xmin $plot_ymin $plot_xmax $plot_ymax"

Tell_If 'ready to draw axes'
If (!$axes_drawn)&&$grid_style!=0 Draw_Plot_Axes

#Select_Pen $red+$2
Select_Pen $2
Tell_If 'plotting pts'
XYPlot pts
Delete_Image pts
Set scale_determined 1
.

Define Draw_Plot_Axes 0
Select_Pen $white
If $have_y_legend "Y_Legend $y_legend"
If $have_x_legend "X_Legend $x_legend"
Tell_If Plot_X_Axis
Plot_X_Axis $plot_xmin $plot_xmax $plot_xmax-$plot_xmin $plot_ymin
Tell_If Plot_Y_Axis
If $y_tick_spacing>0
  Then "Plot_Y_Axis $plot_ymin $plot_ymax $y_tick_spacing $plot_xmin"
  Else "Plot_Y_Axis $plot_ymin $plot_ymax $plot_ymax-$plot_ymin $plot_xmin"
Tell_If Plot_X_Ticks
If $x_tick_spacing>0
  "Label_X_Ticks $plot_xmin $plot_xmax $x_tick_spacing"
Tell_If Plot_Y_Ticks
If $y_tick_spacing>0
  "Label_Y_Ticks $plot_ymin $plot_ymax $y_tick_spacing"
Set axes_drawn 1
.

Set plotter_width 512	# default
Set plotter_height 512	# default
Set plotter_name plotwin	# default
Set plotter_x 400
Set plotter_y 50


Set have_plotter_instance 0

Define Plotter_Instance 0
New_Plotter $plotter_name $plotter_width $plotter_height
Assign_Margins
White_On_Black
#Set pen_color $plot_foreground
Set pen_color $red
#Print pen_color
Posn_Window plotwin $plotter_x $plotter_y
Erase_Plot
# wait to make sure the window is mapped
view wait plotwin quit
Set scale_determined 0
Set have_plotter_instance 1
#advise "Plotter_Instance DONE"
.


