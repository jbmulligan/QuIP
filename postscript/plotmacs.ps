%!
%
% plotmacs.ps BEGIN
%
% generally useful things for plotting data
%
% typical usage:
%
/in { 72 mul } def
/m { moveto } def

/framewidth 0.01 in def
/gridwidth 0.005 in def
/datawidth 0.02 in def
/fatdatawidth 0.060 in def
/thindatawidth 0.020 in def
/numberedlinewidth { 0.020 mul in setlinewidth } def

/tx -0.15 in def
/ty -0.15 in def
/tfact 1.5 def
/smfsiz 0.25 in def
/lgfsiz 0.35 in def
/hugefsiz 0.45 in def

% default values...

/gx0 1.0 in def		% the lower left hand corner
/gy0 1.0 in def
/gdx 6.5 in def		% gdx is the extent of the plot
/gdy 9 in def		% gdy is the extent of the plot


% graph units to be mapped to graphing region
% set these to suit the particular application
/guxmin 0.0 def
/guxmax 4.0 def
/guymin -2.0 def
/guymax 2.0 def
% when is this evaluated?  Would evaluation be deferred if we enclose in braces?
/gudx guxmax guxmin sub def
/gudy guymax guymin sub def

%/the_font /Times-Roman def
/the_font /Helvetica def
the_font findfont smfsiz scalefont setfont

% convert a relative motion from graph units to points
/gdxu { gudx div gdx mul } def
/gdyu { gudy div gdy mul } def

% convert graph units to points
% these macros take a point to a point - to convert vectors, use gdxu, gdyu
%/gxu { guxmin sub gudx div gdx mul gx0 add } def
%/gyu { guymin sub gudy div gdy mul gy0 add } def
/gxu { guxmin sub gdxu gx0 add } def
/gyu { guymin sub gdyu gy0 add } def

/fntfct 3 def

% /y 0 def
/ylabel {
	the_font findfont smfsiz scalefont setfont
	gyu /y exch def
	dup stringwidth pop neg
	gx0 tx tfact mul add
	add
	y smfsiz fntfct div sub
	moveto
	show
} def

/ylabelright {
	the_font findfont smfsiz scalefont setfont
	gyu /y exch def
	dup stringwidth pop % neg
	0 mul
%	gx0 tx tfact mul add
	guxmax gxu tx tfact mul -1 mul add
	add
	y smfsiz fntfct div sub
	moveto
	show
} def

/xlabel {
	gxu /x exch def
	dup stringwidth pop 2 div neg
	x add
	gy0 ty tfact mul add
	smfsiz sub
	moveto
	the_font findfont smfsiz scalefont setfont
	show
} def

% string y  ylabeltick -

/ylabeltick {
% first two lines make the tick on the opposite side of frame
%	dup gyu guxmax gxu exch moveto
%	tx neg 0 rlineto
%
% the next 4 lines draw in thin gridlines
	% gridwidth setlinewidth
	% dup gyu gx0 exch moveto
	% dup gyu guxmax gxu  exch lineto
	% stroke

	framewidth setlinewidth
	dup gyu gx0 exch moveto
	tx 0 rlineto
	stroke
	ylabel
} def

% string y ylabeltick -

/ylabeltickright {
	framewidth setlinewidth
	dup gyu guxmax gxu exch moveto
	tx -1 mul 0 rlineto
	stroke
	ylabelright
} def

/ygridline {
	gridwidth setlinewidth
	dup gyu gx0 exch moveto
	dup gyu guxmax gxu  exch lineto
	stroke
} def

/ytick {
% first two lines make the tick on the opposite side of frame
%	dup gyu guxmax gxu exch moveto
%	tx neg 0 rlineto
%
% the next 4 lines draw in thin gridlines
	% gridwidth setlinewidth
	% dup gyu gx0 exch moveto
	% dup gyu guxmax gxu  exch lineto
	% stroke

	framewidth setlinewidth
	dup gyu gx0 exch moveto
	tx 0 rlineto
	stroke
} def

/xlabeltick {
	xtick
	xlabel
} def

/xgridline {
	gridwidth setlinewidth
	dup gxu gy0 moveto
	dup gxu guymax gyu lineto
	stroke
} def

/xtick {
% the next 4 lines draw in thin gridlines
	% gridwidth setlinewidth
	% dup gxu gy0 moveto
	% dup gxu guymax gyu lineto
	% stroke
%
	framewidth setlinewidth
% the next 2 lines draw a tick on the far side of the frame
%	dup gxu guymax gyu moveto
%	0 ty neg rlineto
%
	dup gxu gy0 moveto
	0 ty rlineto
	stroke
} def

/yaxis {
	framewidth setlinewidth
	gx0 gy0 m
	gx0 guymax gyu lineto
	stroke
} def

/xaxis {
	framewidth setlinewidth
	gx0 gy0 moveto
	guxmax gxu gy0 lineto
	stroke
} def

/frame {
	framewidth setlinewidth
%	gx0		gy0		m
%	gx0		guymax gyu	lineto
%	guxmax gxu	guymax gyu	lineto
%	guxmax gxu	gy0		lineto
%	gx0		gy0		lineto
	guxmin gxu	guymin gyu	m
	guxmin gxu	guymax gyu	lineto
	guxmax gxu	guymax gyu	lineto
	guxmax gxu	guymin gyu	lineto
	guxmin gxu	guymin gyu	lineto
	stroke
} def

/showstring {
	the_font findfont lgfsiz scalefont setfont
	dup stringwidth pop 2 div neg
	0 rmoveto
	show
} def

/showstringljust {
	the_font findfont lgfsiz scalefont setfont
	show
} def

/xlegend {
	the_font findfont lgfsiz scalefont setfont
	dup stringwidth pop 2 div neg
	gx0 gdx 2 div add add
	gy0 ty tfact mul add smfsiz 2 mul sub lgfsiz sub
	moveto
	show
} def

% tx is the tick len in inches
% It's negative, so we add instead of subtract
% tfact is 1.5 and controls the gap after the ticks

/ytick_label_char_count { 2 } def

/ylegend {
	the_font findfont lgfsiz scalefont setfont
	dup stringwidth pop 2 div neg
	gy0 gdy 2 div add add
% BUG proper placement of the y legend
% depends on the length of the strings labelling
% the ticks!?
%	gx0 tx tfact mul add smfsiz 2 mul sub lgfsiz sub
%	gx0 tx tfact mul add smfsiz sub lgfsiz sub
	gx0 tx tfact mul add smfsiz ytick_label_char_count mul sub lgfsiz sub
	gsave
	exch moveto
	90 rotate
	show
	grestore
} def



/ylegendright {
	the_font findfont lgfsiz scalefont setfont
	dup stringwidth pop 2 div neg
	gy0 gdy 2 div add add
% BUG proper placement of the y legend
% depends on the length of the strings labelling
% the ticks!?
%	gx0 tx tfact mul add smfsiz 2 mul sub lgfsiz sub

%	gx0 tx tfact mul add smfsiz sub lgfsiz sub
	guxmax gxu
	tx tfact mul
	neg
	add
	lgfsiz add	% allow for the height of the legend
% to allow for the labels, we need to know the string length!?
% here we guess 3 chars...
% BUG need to hand tune for each plot!?
	smfsiz 3 mul add
	gsave
	exch moveto
	90 rotate
	show
	grestore
} def



/smxlegend {
	the_font findfont smfsiz scalefont setfont
	dup stringwidth pop 2 div neg
	gx0 gdx 2 div add add
	gy0 ty tfact mul add smfsiz 2 mul sub smfsiz sub
	moveto
	show
} def


/smylegend {
	the_font findfont smfsiz scalefont setfont
	dup stringwidth pop 2 div neg
	gy0 gdy 2 div add add
	gx0 tx tfact mul add smfsiz 2 mul sub smfsiz sub
	gsave
	exch moveto
	90 rotate
	show
	grestore
} def

/l {
	lineto
	currentpoint
	stroke
	moveto
} def

/plot_title {
	the_font findfont hugefsiz scalefont setfont
	dup stringwidth pop 2 div neg
	gx0 gdx 2 div add add
	gy0 gdy add hugefsiz add
	moveto
	show
} def

% bar for bar graph

% x y bar     - draws a bar from the x axis to y
% x and y are in plotting units, not page units!

/barwidth 1 def	% redefine this based on units...

% this assume xmin is 0?

/bar {
  newpath
  exch dup	% extra copy of x
  barwidth 2 div add gxu guymin gyu moveto
  exch		% back to x y
  dup 0 exch guymin sub gdyu rlineto
  barwidth gdxu neg 0 rlineto
  dup neg gdyu 0 exch rlineto
  barwidth gdxu 0 rlineto
  pop pop	% eat the args
  closepath fill
} def

%symbols

/dotsize 3 def
/symbol_line_width { 0.02 in } def

% with this definition, the line width scales with the dot size!?
% How can we save a color?
/open_circle {
  gsave translate dotsize dup scale newpath
   0 0 1  0 360 arc closepath 
  open_symbol grestore } def

/filled_circle  {
  gsave translate dotsize dup scale newpath
   0 0 1  0 360 arc closepath 
  fill grestore } def

/open_square { 
  framewidth setlinewidth
  gsave translate dotsize dup scale
  newpath
  1  1 moveto -1  1 lineto
 -1 -1 lineto  1 -1 lineto
  closepath open_symbol grestore } def

/filled_square { 
  gsave translate dotsize dup scale
  newpath
  1  1 moveto -1  1 lineto
 -1 -1 lineto  1 -1 lineto
  closepath fill grestore } def

/open_inverted_triangle {
  datawidth dotsize div setlinewidth
  gsave translate dotsize dup scale
  newpath
  0 -1.414 moveto  1.414 1 lineto  -1.414 1 lineto
  closepath open_symbol grestore } def

/filled_inverted_triangle {
  gsave translate dotsize dup scale
  newpath
  0 -1.414 moveto  1.414 1 lineto  -1.414 1 lineto
  closepath fill grestore } def

/open_triangle {
  gsave translate dotsize dup scale
  newpath
  0 1.414 moveto  1.414 -1 lineto  -1.414 -1 lineto
  closepath open_symbol grestore } def

/open_symbol {
  gsave 1 1 1 setrgbcolor fill grestore
  symbol_line_width dotsize div setlinewidth
  stroke } def

/filled_triangle {
  gsave translate dotsize dup scale
  newpath
  0 1.414 moveto  1.414 -1 lineto  -1.414 -1 lineto
  closepath fill grestore } def

/open_diamond {
  gsave translate dotsize dup scale
  newpath
  0 1.414 moveto  1.414 0 lineto  0 -1.414 lineto  -1.414 0 lineto
  closepath open_symbol grestore } def

/filled_diamond {
  gsave translate dotsize dup scale
  newpath
  0 1.414 moveto  1.414 0 lineto  0 -1.414 lineto  -1.414 0 lineto
  closepath fill grestore } def

% does x y specify the position of the arrowhead tip?

/arrowhead_length 20 def
/arrowhead_width 6 def

% angle size x y arrow
/arrow {
  gsave translate dup scale rotate
  newpath
%  1 setlinewidth
  1 setlinejoin
  -30 0 moveto
  30 0 lineto
  -1 arrowhead_length mul arrowhead_width rlineto
  arrowhead_length -1 arrowhead_width mul rmoveto
  arrowhead_length -1 mul arrowhead_width -1 mul rlineto
  closepath stroke grestore } def

% stuff lifted from psplot output

/solid {{}0}def
/dotted	{[2 nail 2 nail ] 0}def
/longdashed {[10 nail] 0}def
/shortdashed {[6 nail] 0}def
/dotdashed {[2 nail 6 nail 10 nail 6 nail] 0}def
/disconnected {{}0}def
/len {dup mul exch dup mul add sqrt}def
/imtx matrix currentmatrix def
/nail {0 imtx dtransform len 0 idtransform len}def
/f {load exec setdash}def

% end of plotmacs.ps
%
% plotmacs.ps END
%
