#include "data_obj.h"
//#include "ioctl_polhemus.h"

#ifdef INSIDE_TRACK
#define MAX_POLHEMUS_STATIONS	2
#else
#define MAX_POLHEMUS_STATIONS	4
#endif

// Polh_Output_Type used to be defined in ioctl_polhemus.h

/* data formats
 *
 * See polhemus manual p. A-48
 */

typedef enum {
	STATION,		/* generated by the app */
	DATE,			/* formatting option, uses SECONDS */
	SECONDS,		/* generated by the driver */
	MSECS,			/* generated by the driver */
	XYZ_INT,		/* the rest are generated by the board ... */
	EULER_INT,
	X_DIR_INT,
	Y_DIR_INT,
	Z_DIR_INT,
	QUAT_INT,
	XYZ_FLT,
	EULER_FLT,
	X_DIR_FLT,
	Y_DIR_FLT,
	Z_DIR_FLT,
	QUAT_FLT,
	N_OUTPUT_TYPES
} Polh_Output_Type;

typedef struct polh_record_fmt {
	short			rf_n_data;		/* number of output types */
	short			rf_n_words;		/* total number of words in the record */
	short			rf_n_read;		/* words to read from board */
	short			rf_station;		/* C index, 0 or 1 */
	short			rf_flags;
	Polh_Output_Type	rf_output[N_OUTPUT_TYPES];
} Polh_Record_Format;

#define STATION_1_ACTIVE		1
#define STATION_2_ACTIVE		2
#define BOTH_STATIONS_ACTIVE		( STATION_1_ACTIVE | STATION_2_ACTIVE )



typedef enum {
	PH_ERR_XMTR_ENV_CONN,
	PH_ERR_RCVR_CONN,
	PH_ERR_MOV_RAPID,
	PH_ERR_OUT_BOUNDS,
	PH_ERR_V_BOUNDS,
	PH_ERR_Q_BOUNDS,
	PH_ERR_XMTR_MAT,
	PH_ERR_RCVR_MAT,
	PH_ERR_COMP,
	N_POLH_ERRS
} Ph_Err_Code;

typedef struct ph_err {
	char *		pe_str;
	Ph_Err_Code	pe_code;
	char *		pe_msg;
} Ph_Err;


typedef struct output_datum {
	char *			od_name;
	Polh_Output_Type	od_type;
	int			od_code;
	int			od_words;	/* number of words transmitted by polhemus */
	int			od_strings;	/* number of strings in formatted output */
} Output_Datum;

extern Output_Datum od_tbl[N_OUTPUT_TYPES];

typedef struct formatted_point {
	char			fp_date_str[64];	/* BUG do we know this is long enough? */
	uint32_t		fp_seconds;
	uint32_t		fp_usecs;
	short			fp_station;
	float			fp_x;
	float			fp_y;
	float			fp_z;
	float			fp_azim;
	float			fp_elev;
	float			fp_roll;
	float			fp_xdc_x;
	float			fp_xdc_y;
	float			fp_xdc_z;
	float			fp_ydc_x;
	float			fp_ydc_y;
	float			fp_ydc_z;
	float			fp_zdc_x;
	float			fp_zdc_y;
	float			fp_zdc_z;
	float			fp_q1;
	float			fp_q2;
	float			fp_q3;
	float			fp_q4;
} Fmt_Pt;


typedef struct station_data {
	int 			sd_flags;		/* active, etc */
	Polh_Record_Format	sd_multi_prf;
	Polh_Record_Format	sd_single_prf;
} Station_Data;

#define STATION_ACTIVE		1

#define STATION_IS_ACTIVE(index)	(station_info[index].sd_flags & STATION_ACTIVE)


#define DEFAULT_SYNC_HZ		60			/* default softwaresync hz */
#ifdef INSIDE_TRACK
#define POLH_DEV		"/dev/polhemus"		/* polhemus device file (read-write) */
#else
#define POLH_DEV		"/dev/polhemus"		/* symlink to tty? */
//#define POLH_DEV		"/dev/ttyS15"		/* polhemus device file (read-write) */
//#define POLH_DEV		"/dev/ttyUSB0"		/* polhemus device file (read-write) */
//#define POLH_DEV		"/dev/ttyS0"		/* testing on dirac w/ port used by knox switcher */
#endif

#define POLH_DATA_DEV		"/dev/polhemusdata"	/* polhemus data device file w/ timestamps (read-only) */
#define POLH_STATION		1			/* active station number */
#define POLH_RECV		1			/* polhemus receiver number */
#define POLH_XMTR_NUM		1			/* polhemus transmitter number (always 1) */

/* Polhemus manual pg. A5 - A6 */
#define IN_PER_LSB		((300 / 2.54) / 32767.0)/* inches conversion */
#define CM_PER_LSB		(300 / 32767.0)		/* centimeter conversion */
#define DEG_PER_LSB		(180 / 32767.0) 	/* degree conversion */

#define RAW_TO_CM(raw)		(float)( *((short*)raw) * CM_PER_LSB)	/* raw data conversion */	
#define RAW_TO_IN(raw)		(float)( *((short*)raw) * IN_PER_LSB)	/* raw data conversion */	
#define RAW_TO_DEG(raw)		(float)( *((short*)raw) * DEG_PER_LSB)	/* raw data to degrees */


/* polhemus output record sizes (Polhemus manual: pg. A63 - A82) */
/* These are probably only applicable for binary data transfer, or with inside track? */
#define ALIGN_REC	68 
#define BORE_REC	26
#define XMTR_REC	30
#define RECV_REC	30
#define ATT_REC		34
#define POS_FTR_REC	34
#define SYNC_REC	6
#define ANG_REC		60
#define POS_ENV_REC	54
#define HEMI_REC	26

#ifdef INSIDE_TRACK
#define STAT_REC	8
#else
#define STAT_REC	9
#endif

#define STATUS_REC	56

#define PH_INTERNAL_SYNC	0
#define PH_EXTERNAL_SYNC	1
#define PH_SOFTWARE_SYNC	2

/* polhemus command codes */
typedef enum ph_cmd_code {
	PH_ALIGNMENT,
	PH_RESET_ALIGNMENT,
	PH_BORESIGHT,
	PH_REF_BORESIGHT,
	PH_RESET_BORESIGHT,
	PH_XMTR_ANGLES,
	PH_RECV_ANGLES,
	PH_ATT_FILTER,
	PH_POS_FILTER,
	/*
	PH_INTERNAL_SYNC,
	PH_EXTERNAL_SYNC,
	PH_SOFTWARE_SYNC,
	*/
	PH_SYNC_MODE,
	PH_REINIT_SYS,
	PH_ANGULAR_ENV,
	PH_POSITIONAL_ENV,
	PH_HEMISPHERE,
	PH_CONTINUOUS,
	PH_SINGLE_RECORD,
	PH_NONCONTINUOUS,
	PH_INCHES_FMT,
	PH_CM_FMT,
	PH_STATION,
	PH_STATUS,
	N_PH_CMD_CODES
} Ph_Cmd_Code;

#define IS_FILTER_CMD(c)	( c == PH_ATT_FILTER || c == PH_POS_FILTER )
#define IS_SYNC_CMD(c)		( c == PH_INTERNAL_SYNC || \
				  c == PH_EXTERNAL_SYNC || \
				  c == PH_SOFTWARE_SYNC || \
				  c == PH_SYNC_MODE )

/* polhemus command */
typedef enum ph_trs_num {
	PH_NEED_XMTR,		/* need transmitter number */
	PH_NEED_RECV,		/* need receiver number */
	PH_NEED_STAT,		/* need station number */
	PH_NEED_NONE,		/* needs nothing */
	N_PH_TRS_NUM
} Ph_Trs_Num;

typedef int ph_type_t;

typedef struct ph_cmd {
	const char *	pc_name;	/* our string */
	const char *	pc_cmdstr;	/* command string */
	Ph_Cmd_Code	pc_code;	/* polhemus command number */
	ph_type_t	pc_flags;	/* command type flag */
	Ph_Trs_Num	pc_trs;		/* polhemus transmitter/station/receiver flag */
	int		pc_n_args;	/* number of max. optional arguments */
	int		pc_rec_size;	/* output record size */
} Ph_Cmd;

#define STATION_CHAR(station_number)	('1'+station_number)

/* polhemus command types */
#define PH_SET		1		/* polhemus commands that set system attributes */
#define PH_GET		2		/* polhemus commands that get system attributes */
//  We used to have a reset type, but do we really need it to be distinct from SET?
//#define PH_RESET	4		/* polhemus command that reset system attributes */
#define PH_SG		(PH_SET|PH_GET) /* polhemus commands that set/get system attributes */

#define CHECK_PH_CMD( cmd, cmd_type )	( polh_cmds[cmd].pc_flags & cmd_type )
#define CAN_SET( cmd )		CHECK_PH_CMD( cmd, PH_SET )	
#define CAN_GET( cmd )		CHECK_PH_CMD( cmd, PH_GET )	
//#define CAN_RESET( cmd )	CHECK_PH_CMD( cmd, PH_RESET )	

//#define PH_CMD_TYPE_STR( type )		(type==PH_SET?"set":(type==PH_GET?"get":(type==PH_RESET?"reset":(type==PH_SG?"set/get":"invalid command type???"))))
#define PH_CMD_TYPE_STR( type )		(type==PH_SET?"set":(type==PH_GET?"get":(type==PH_SG?"set/get":"invalid command type???")))

/* polhemus device */
typedef enum polh_dev {
	POLH_NORMAL_DEVICE,
	POLH_DATA_DEVICE
} Ph_Dev;

/* globals */

extern int curr_station_idx;
extern Station_Data station_info[2];
extern short resp_buf[];
extern debug_flag_t debug_polhemus;
extern int polh_fd;
extern Ph_Cmd polh_cmds[];
extern int which_receiver;
extern int polh_units;
extern int polh_continuous;	/* flag */
extern int n_active_stations;
extern ssize_t n_response_chars;

/* prototypes */

/* polh_dev.c */

extern char *_read_polh_line(SINGLE_QSP_ARG_DECL);
#define read_polh_line() _read_polh_line(SINGLE_QSP_ARG)

extern int polh_getc(void);
extern int polh_ungetc(int);
extern void _flush_polh_buffer(SINGLE_QSP_ARG_DECL);
#define flush_polh_buffer() _flush_polh_buffer(SINGLE_QSP_ARG)

extern void _fill_polh_buffer(SINGLE_QSP_ARG_DECL);
#define fill_polh_buffer() _fill_polh_buffer(SINGLE_QSP_ARG)

extern void _flush_input_data(SINGLE_QSP_ARG_DECL);
#define flush_input_data() _flush_input_data(SINGLE_QSP_ARG)

extern void show_output_data_format(int);
extern int _polhemus_output_data_format(QSP_ARG_DECL  Polh_Record_Format *prfp );
#define polhemus_output_data_format(prfp) _polhemus_output_data_format(QSP_ARG  prfp)

extern void get_active_stations(SINGLE_QSP_ARG_DECL);

extern void display_buffer(short *buf,int n);
extern int read_polh_dev(short* databuf, int n_want);
extern int read_polh_data(void* raw_pdp, int n_want);

extern int init_polh_dev(SINGLE_QSP_ARG_DECL);
extern int _send_string(QSP_ARG_DECL  const char *);
#define send_string(s) _send_string(QSP_ARG  s)

extern void _read_response(QSP_ARG_DECL  int display_flag);
#define read_response(display_flag) _read_response(QSP_ARG  display_flag)

extern void _clear_polh_dev(SINGLE_QSP_ARG_DECL);
#define clear_polh_dev() _clear_polh_dev(SINGLE_QSP_ARG)

extern int reopen_polh_dev(SINGLE_QSP_ARG_DECL);
extern int _polhemus_word_count(SINGLE_QSP_ARG_DECL);
#define polhemus_word_count() _polhemus_word_count(SINGLE_QSP_ARG)

extern int _polhemus_byte_count(SINGLE_QSP_ARG_DECL);
#define polhemus_byte_count() _polhemus_byte_count(SINGLE_QSP_ARG)

extern int _send_polh_cmd(QSP_ARG_DECL  Ph_Cmd_Code, const char*);
#define send_polh_cmd(code,s) _send_polh_cmd(QSP_ARG  code,s)

extern int get_polh_info(QSP_ARG_DECL  Ph_Cmd_Code, const char*);
extern int read_single_polh_dp(QSP_ARG_DECL  Data_Obj *);
extern int read_next_polh_dp(QSP_ARG_DECL  Data_Obj *);
extern int _read_cont_polh_dp(QSP_ARG_DECL  Data_Obj *);
#define read_cont_polh_dp(dp) _read_cont_polh_dp(QSP_ARG  dp)

extern void read_polh_vector(QSP_ARG_DECL  Data_Obj*);
extern int good_polh_vector(QSP_ARG_DECL  Data_Obj*);
extern void format_polh_vector(Data_Obj *);
extern void convert_polh_vector(Data_Obj *,Data_Obj *);
extern void display_formatted_point(QSP_ARG_DECL  Fmt_Pt *, Polh_Record_Format * );
extern int _set_polh_sync_mode(QSP_ARG_DECL  int mode_code);
#define set_polh_sync_mode(mode_code) _set_polh_sync_mode(QSP_ARG  mode_code)

extern void set_polh_sync_rate(long);
extern int set_continuous_output_file(QSP_ARG_DECL  const char*);
extern COMMAND_FUNC( start_continuous_output_file );
extern COMMAND_FUNC( do_start_continuous_mode );
extern COMMAND_FUNC( do_stop_continuous_mode );
extern void stop_continuous_output_file(void);
extern void _sort_table(SINGLE_QSP_ARG_DECL);
#define sort_table() _sort_table(SINGLE_QSP_ARG)

extern void _activate_station(QSP_ARG_DECL  int station,int flag);
#define activate_station(station,flag) _activate_station(QSP_ARG  station,flag)

extern void _set_polh_units(QSP_ARG_DECL  Ph_Cmd_Code);
#define set_polh_units(code) _set_polh_units(QSP_ARG  code)

extern void dump_polh_data(void);
extern void raw_dump_polh_data(void);

/* polh_func.c */
extern int set_polh_angles(QSP_ARG_DECL Ph_Cmd_Code);
#define SET_POLH_ANGLES(code)				set_polh_angles(QSP_ARG code)
extern int set_polh_filter(QSP_ARG_DECL Ph_Cmd_Code);
#define SET_POLH_FILTER(code)				set_polh_filter(QSP_ARG code)
extern int ask_env(QSP_ARG_DECL const char* name, const char* type, float* max, float* min, float sys_max, float sys_min);
#define ASK_ENV(name,type,max,min,sys_max,sys_min)	ask_env(QSP_ARG name,type,max,min,sys_max,sys_min)

/* polh_err.c */
extern int _check_polh_data(QSP_ARG_DECL  char *, Polh_Record_Format *);
#define check_polh_data(s,rfp) _check_polh_data(QSP_ARG  s,rfp)

extern int _check_polh_output(QSP_ARG_DECL  char *, int, Ph_Cmd_Code );
#define check_polh_output(s,n,c) _check_polh_output(QSP_ARG  s,n,c)

/* acquire.c */
extern COMMAND_FUNC( polhemus_wait );
extern COMMAND_FUNC( polhemus_halt );
extern void polh_read_async(int);
extern int format_polh_data( Fmt_Pt *fpp, Data_Obj *dp, Polh_Record_Format *prfp );
extern void assign_polh_var_data(const char *varname, Data_Obj *dp, Polh_Output_Type type, int index);

#ifdef FOOBAR
/* polhemus command macros */
#define SET_POLH_SYS(code)		(send_polh_cmd(code,NULL))
#define SET_POLH_SYS_ARGS(code,args)	(send_polh_cmd(code,args))
#define RESET_POLH_SYS(code)		(send_polh_cmd(code,NULL))
#endif /* FOOBAR */

